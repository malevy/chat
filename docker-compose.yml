services:
    # React client with nginx
    client:
        build:
            context: ./client
            dockerfile: Dockerfile
        ports:
            - "3000:80"
        networks:
            - chat_network

    # Redis for cluster communication
    redis:
        image: redis:7
        ports:
            - "6379:6379"
        command: redis-server --appendonly yes
        volumes:
            - redis_data:/data
        networks:
            - chat_network

    # Chat server instance 1
    chat-server-1:
        build:
            context: ./server
            dockerfile: Dockerfile
        environment:
            - SPRING_PROFILES_ACTIVE=cluster
            - SPRING_DATA_REDIS_HOST=redis
            - SPRING_DATA_REDIS_PORT=6379
            - SERVER_PORT=8080
        depends_on:
            - redis
        networks:
            - chat_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Chat server instance 2
    chat-server-2:
        build:
            context: ./server
            dockerfile: Dockerfile
        environment:
            - SPRING_PROFILES_ACTIVE=cluster
            - SPRING_DATA_REDIS_HOST=redis
            - SPRING_DATA_REDIS_PORT=6379
            - SERVER_PORT=8080
        depends_on:
            - redis
        networks:
            - chat_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Nginx load balancer for backend services
    nginx:
        image: nginx:alpine
        ports:
            - "8080:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - chat-server-1
            - chat-server-2
        networks:
            - chat_network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--quiet",
                    "--tries=1",
                    "--spider",
                    "http://localhost/actuator/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    redis_data:

networks:
    chat_network:
        driver: bridge
